$Id$

---------- TODO list and tentative development plan  ----------------

* GUI bug: when "show all datasets" is selected, zooming doesn't work

* finish new parser (cparser.cpp/eparser.cpp/lexer.cpp)

* make possible something like this:  $min = @*.min(y if a)

* data transformations: add aggregate functions argmin and argmax

* [BUG] parsing problems: "a=a" => OK (should be error)  "a=ab" => Syntax error

* command info:
  - "info 12, fit" doesn't work, although "info fit, 12" works.
  - support quoted strings, e.g. info '2+2=', 2+2
  - use new lexer
  - "info peaks" should use info-numeric-format
  - @*: info filename, F[1].area, F[1].area.error >>file
  - info y[$var]
  - ',' at the end prevents new line

* GUI: Data>Load should use default load dir (as Quick Load)

--- 0.9.5 

* subtracting another dataset with interpolation of the subtrahend
  (this is important for subtracting background from a file);
  for consistency, `+' should add interpolated data, and 'U' can stand
  for a sum of sets.
  GUI: Data > Subtract data from file

* finish powder diffraction add-on (Pawley fitting)

* FFT data transformation using either KISS FFT or FFTW library,
  fft[-inv]-xx, where xx is re, im, amp, e.g. @n = fft-re @3 

* convolution and deconvolution of two datasets or a dataset with Gaussian:
  convolve @0 @1; convolve @0 2.3; deconvolve @0 3.4
  
* embed Lua interpreter

* GUI: there is ugly vertical line (a part of the fitted curve) in points
  where the value is undefined (e.g. in ReadShockley function for x=0).

* GUI: when dataset is changed and the active function (i.e. the function
  in the bottom of the sidebar) is not in the new active dataset, the active
  function should also be changed (to the function that was active last time
  this dataset was active)

* add functions cot and coth

* GUI: redesign gradient dialog

* (GUI) plot horizontal/vertical lines
     can be used to show theoretical peak positions in XRD
     (or to mark simulation restarts in data from MD)
     Syntax: line x=42.2 label="foo"

* fitting: stopping criterium based on elapsed time

* (GUI) a simple (for user) way to interrupt fitting or script
  Requires two thread and thread-safety.

* "%_1.height = ~{sqrt(%_1.height)}^2" creates $_5 before $_4 - check if this
  is safe.

* confidence intervals of model parameters (95%, 99%)
  http://www.boost.org/doc/libs/1_42_0/libs/math/doc/sf_and_dist/html/math_toolkit/dist/stat_tut/weg/st_eg/tut_mean_intervals.html

* ? confidence intervals for data

* data smoothing (Savitzky-Golay and/or other methods)

* GUI: refactor MainPlot - mouse event handling based on subscriptions,
       a clean interface to XOR-drawing 

* magic default parameters: if $default__name is defined: when functions 
  with parameter `name' are "guessed", this parameter is set to $default__name
  (e.g. user sets $default__shape=2.5 to have initial value of Pearson7.shape
  equal 2.5). (Similar to FFrame::get_global_parameters()).

* GUI: it should be possible to constrain two parameters of two peak 
     (using mouse and peak-top menu), at least to make them equal.

* GUI: on "Guess function" toolbar button: if initial values are not known,
  show a dialog asking for the values.

* add a new function category: sigmoids/steps (now function can be guessed as
  "peak" and "linear"). (GUI): drawing drafts for the new category.

* add alpha channel to the toolbar icons

* (GUI) single dialog for configuring main plot (and also aux. plots) (?)
  - now in Configure axes / peak labels fonts are changed (but shouldn't) 
    even if Apply is not pressed 
  - option to change the width of the sum line (and other lines)
  - ? changing data point size and line separately for each dataset,

* unused variables should not slow down fitting

* GUI, enhancements for the script editor: 
       - "info ...> file" marked differently than not redirected info 
       - paths of files to be read should be checked 
       - ? search'n'replace button

* user defined functions:
      - more sophisticated simplifications of expressions and CSE
      - calculating limits, width, area, etc. for UDF
      - ?? optionally use LLVM for faster calculation of user-defined functions

* EMG function: how to calculate it? Now there are some problems with
  this function. There must be smarter way to implement it...
  perhaps using gsl_sf_log_erfc or exp(x*x)*erfc(x) from
  http://www.netlib.org/specfun/erf

* Use a better approximation of Voigt function than the one used now.
  There are dozens of papers on Voigt calculation, mostly in JQSRT.

* GUI: menu Functions:
  Functions > Peak-Find Info -> animation
  Functions > Multidata P-F Info -> window with list of parameters (Xview-like)

* ? box-constrained simple variables 

* ?fitting with enforcing valid function's parameters: 
    eg. in Pearson shape > 0.5 , shape < 1e9
    what if parameter is out of domain? change? disable function?

* ? more sophisticated algorithms for peak detection
    - compare methods from origin pkfind, peakfit and other programs
    - research papers: http://dx.doi.org/10.1016/j.chroma.2004.11.073
                       http://dx.doi.org/10.1002/cem.1005

* fitting: GA fitting options,
  replace "shake_before" in LMfit.cpp with separate "randomize" method

* fitting:
	simulated annealing (it can replace LM shake_before option)
	perhaps also BFGS, conjugate gradients methods
	Rosenbrock Method:
	  http://www.applied-mathematics.net/optimization/rosenbrock.html

* fitting: consider using 3rd-party library for nonlinear fitting/optimization.
  The list of libraries in this category:
    NLopt: http://ab-initio.mit.edu/wiki/index.php/NLopt
    ALGLIB: http://www.alglib.net/
    COOOL: http://coool.mines.edu/ 
    GAUL: http://gaul.sourceforge.net/, 
    WNLIB: http://www.willnaylor.com/wnlib.html
    GSL and 3rd-party extensions to GSL,
    netlib: http://www.netlib.org/ 
    OOL: http://OOL.sf.net, 
    scitbx::lbfgs http://cctbx.sourceforge.net/
    http://sal.jyu.fi/B/3/index.shtml, 
    http://coin-or.org
    http://www-unix.mcs.anl.gov/otc/Guide/faq/nonlinear-programming-faq.html 
    levmar: http://www.ics.forth.gr/~lourakis/levmar/
    OpenOpt: http://openopt.org/

* fitting:
  robust fit - other error distributions then Gaussian, eg. Lorenzian...;
  so called 'maximum-likelihood method' -- using Poisson error distribution.

* ? exporting formulae in MathML (when option formula-export-style == mathml)

* when wxWidgets 3 will be available in major Linux distributions:
  - open-file dialog (with preview) will use xybrowser.cpp
  - file dialogs will be changed to take adventage of custom controls:
      * Choose log file: add "log also output" checkbox
      * Data > Export will be done in one step
      * "Export formula" dialog will have formula-export-style option
  - use wxDataViewCtrl in Data > Table, Data > Edit Transformations
  - use wxDataViewCtrl for the lists at the sidebar,
    refactor ListWithColors::populate(), add sorting by clicking on column 
    header (use case: sort functions by centers)
  - use wxToggleBitmapButton buttons on sidebar>functions (buttons that make 
    hwhm and shape equal for all functions)

