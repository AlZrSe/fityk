

* (GUI) peak positions as an option to any aux. plot 
        (not separate type of aux.p.)

* (GUI) new aux. plot type: cumulative chi2 (normalized, ie. cum. chi2 / (N-P))

* (GUI) show function limits when cursor is over peak top

* data tranformations: new functions: randuniform[a b]() randnormal[mu sigma]()

* [del] key at data pane should work as close button

* improve Voigt function (cut-tails, better approx?) 

------------------ 

* view with/without background button (like in 0.4.x, requires storing
  background points)

* user defined functions 
      - syntax:
        --> define Gaussian(a,pos,width): a*exp(-((x-pos)/width)^2)
	                    ^^^ any name but 'x' allowed here
	--> %g = Gaussian(1,$b,~3.4)
      - more sophisticated simplifications of expressions and CSE(!)
      - calculating limits, width, area, etc. for UDF(!)

------------------ 

* (CODE STYLE) put `const' always behind the type

* (CODE STYLE) propagate errors using exceptions (when suitable) rather 
  than error codes

* (CODE STYLE) use smart pointers: 
  http://www.boost.org/libs/smart_ptr/smart_ptr.htm
  (the library will be distributed in 3rdparty/boost)

* build engine (everything but GUI/CLI interface) as a library
  with documented API.

* problem: fityk can't be compiled with UNICODE-enabled wxWidgets

* (WWW) update screenshots 

* there are problems with refreshing plots and output window when program
  is busy (ie. when running script or fitting). It seems to be platform
  dependent.

* write a good portable .spec (spec is used for building RPM)

* auto-freezing of peaks at disactivated range

* (GUI) file preview (in grid) in "Load File Custom" dialog 
  setting initial path to currently loaded file (calling SetPath() 
  is giving segfault, don't know why) 
  Perhaps use wxGenericFileDialog instead of wxGenericDirCtrl (?)

* logarithmic scale  

* loading data -- use Difdaf library (when it will be ready) for powder
  diffraction data import.
  other formats (from survey): .jdx JCAMP-DX (www.jcamp.org)
		         Galactic (GRAMS/32) SPC files (especially multifiles)

* (GUI) one dialog for plot settings. More precise configuration of axis tics.
  horizontal/vertical peak labels, etc.
  single ergonomic interface changing colors of everything(?)

* python scripts  -- built-in Python interpreter which allows to extend 
  Fityk using user-written scripts, optional modules, etc. 
  [IMPORTANT]

* rewrite crystallographic part in python
  [IMPORTANT]

* (GUI) stopping fitting interactively (when user don't want to wait longer);
  use threads?

* automatic background substraction - what are good algorithms?

* (F > file) when exporting function/sum as points, it shuld be possible 
  to set step of these points (s.set export-points-step = 0.?)
  and to export baseline and each peak as a separately (multicolumn CSV)

* (Windows only) exporting plots to PostScript file and to metafile(clipboard) 

* more sophisticated algorithms for peak detection

* fitting: it should be separated even more from the rest of the program.
  Perhaps it fitting functions should be in extern library (COOOL,
  GAUL, WNLIB, netlib, OOL.sf.net
  are there any other such libraries? 
  I haven't investigated the possibility of using mentioned libs yet. 
  Links: http://coool.mines.edu/ http://gaul.sourceforge.net/, 
  http://www.willnaylor.com/wnlib.html,
  http://sal.jyu.fi/B/3/index.shtml, http://coin-or.org,
  http://www-unix.mcs.anl.gov/otc/Guide/faq/nonlinear-programming-faq.html) 

* fitting: robust fit - other error distributions then Gaussian, 
  eg. Lorenzian...; so called 'maximum-likelihood method' -- using Poisson
  error distribution.

* info -- more informations about error, confidence limits, etc.
  graphical interface Fit > Info
  easy way to get (write to file) parameters with errors [IMPORTANT]

* Now only '.' is supported as a decimal separator. ',' should also
  be an option.

* (GUI) "Report Bug" item in Help menu, clickable link in About dialog
        http://wiki.wxwidgets.org/wiki.pl?Launching_The_Default_Browser

* investigate LLVM - can it be used for faster calculation of 
  user-defined functions?

