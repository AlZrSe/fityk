#!/bin/bash 
# $Id$

version=0.8.7
WEB="iris.unipress.waw.pl:/d2/people/wojdyr/www/fityk2/"
SF_NEW_RELEASE="https://sourceforge.net/project/admin/newrelease.php?package_id=80864&group_id=79434"
SF_ADMIN_PAGE="https://sourceforge.net/project/admin/?group_id=79434"
WEB_ANNOUNCE_DIR=$WEB
WEB_ANNOUNCE_FILE="index.html"
WEB_DOWNLOAD_FILE="download.html"

BUILD_DIR=testbuild
MINGW_DIR=cross_win32
ALL_WIN_FILES=all_files #inside of $MINGW_DIR

win_setup_filename=cross_win32/all_files/Output/fityk-$version-setup.exe
tarball_filename=fityk-$version.tar.bz2

if [ $# -eq 0 ]; then 
 echo Version in this script is set to $version
 echo usage: $0 step_nr
 echo steps:
 echo 0. prepare new version and increase version number 
 echo "1. test if everything compiles after distclean, run samples"
 echo "2. test if this release can be compiled with other settings"
 echo 5. put docs on www
 echo 6. compile windows version and make installer
 echo 8. SourceForge release
 echo 9. web announce
 echo 10. FreshMeat announce
 echo 11. clean all changes... 
 exit
fi

echo
echo        Step $1 of the release procedure...         
echo
echo -n '===>' 



if [ $1 -eq 0 ]; then
 echo increase version number in configure.ac
 echo "please do it!  See the line with AC_INIT(fityk, x.y.z)"
 echo "and the line with version=x.x.x in this release script"
 echo
 echo now the version in this script is: $version
 echo and configure.ac contains:
 grep AC_INIT configure.ac
 echo and doc/fitykhelp.xml:
 grep '<title>Fityk' doc/fitykhelp.xml
 echo
 echo svnversion: `svnversion`



elif [ $1 -eq 1 ]; then
 echo  testing compilation and instalation after make distclean

 make distclean
 ./autogen.sh
 rm -rf $BUILD_DIR
 mkdir $BUILD_DIR
 cd $BUILD_DIR
 ../configure --prefix=$HOME/local --enable-python
 make 
 make dist-bzip2
 mv $tarball_filename ..
 make install
 echo run samples...
 cd ../samples
 cfityk nacl01.fit 
 cfityk test_syntax.fit 
 fityk nacl01.fit
 fityk SiC_Zn.fit


elif [ $1 -eq 2 ]; then
 echo  go to buildtest/ and run tests ...
 

elif [ $1 -eq 5 ]; then
 echo  putting docs on www   
 echo destination: $WEB
 cd doc/ 
 echo "preparing and sending PDF manual..."
 make fitykhelp.pdf
 scp fitykhelp.pdf $WEB/doc/
 echo sending fitykhelp.html fitykhelp.xml ...
 make fitykhelp.html 
 scp fitykhelp.html fitykhelp.xml html.css $WEB/doc/
 echo sending fitykhelp_img ...
 scp -r fitykhelp_img/ $WEB/doc/
 echo generating html chunks...
 make html-chunks
 echo sending html chunks...
 scp *.html *.css $WEB/doc/html/
 cd ..
 echo sending NEWS file...
 scp NEWS $WEB/d/
 echo generating doxygen docs...
 cd doxygen/
 doxygen
 echo sending doxygen docs... 
 scp -r html/ $WEB/doxygen/
 cd ..
 
# testing mac compilation
# using MacOsX almost-working cross-compiler from 
#  http://biolpc22.york.ac.uk/pub/linux-mac-cross/
# PATH=$PATH:/opt/mac/bin 
# prepare wx
# ../configure --enable-debug --prefix=/home/wojdyr/local/  --host=i686-apple-darwin8 
# and fityk
# ...
 
elif [ $1 -eq 6 ]; then
 echo Building MS Windows version
 #WXMSWINSTALL=/home/wojdyr/local/mingw32msvc/
 WXMSWINSTALL=/home/wojdyr/local/mingw32/
 PATH=$PATH:$HOME/local/mingw32/bin
 #
 # wxWidgets where cross-compiled using debian mingw32* packages:
 #      download wxAll
 #      tar xjf ../tarballs/wxWidgets-2.6.2.tar.bz2
 #      cd wxWidgets-2.6.2/
 #      mkdir build-mingw
 #      cd build-mingw/
 #      ../configure --build=i686-pc-linux-gnu --host=i586-mingw32msvc \
 #        --with-msw --disable-threads --disable-shared --disable-unicode \
 #        --enable-optimise --prefix=$WXMSWINSTALL \
 #        --disable-compat26 \
 #        --without-regex --without-expat --without-odbc \
 #        --without-opengl --without-libjpeg --without-libtiff \
 #        --disable-html --disable-htmlhelp --disable-stc --disable-intl \
 #        --disable-protocols --disable-protocol --disable-fs_inet \
 #        --disable-sockets --disable-ipc --disable-apple_ieee \
 #        --disable-backtrace \
 #        --disable-debugreport --disable-dialupman  --disable-tarstream \
 #        --disable-sound --disable-mediactrl --disable-url --disable-variant \
 #        --disable-aui --disable-xrc --disable-docview \
 #        --disable-logdialog --disable-animatectrl --disable-calendar \
 #        --disable-datepick --disable-tipwindow --disable-popupwin \
 #        --disable-splash --disable-tipdlg \
 #        --disable-wizarddlg  --disable-miniframe --disable-joystick \
 #        --disable-gif  --disable-pcx --disable-tga --disable-iff \
 #        --disable-pnm --disable-mdi --disable-richtext
 #      make; make install
 #
 rm -rf $MINGW_DIR
 mkdir $MINGW_DIR
 cd $MINGW_DIR
 tar xjf ../$tarball_filename
 # host: MinGW from .deb: i586-mingw32msvc, built locally: i586-pc-mingw32
 ./fityk-$version/configure --build=x86_64-pc-linux-gnu --host=i586-pc-mingw32 \
   CXXFLAGS="-O3" LDFLAGS="-s" --disable-CLI --with-wx-prefix=$WXMSWINSTALL 
 make || exit
 rm -rf ../samples/tmp*
 cp -rf ../samples .
 mkdir $ALL_WIN_FILES $ALL_WIN_FILES/src $ALL_WIN_FILES/doc
 cp fityk.iss ../fityk.url ../COPYING ../TODO ../NEWS $ALL_WIN_FILES
 cp src/wxgui/fityk.exe $ALL_WIN_FILES/src
 cp -r ../samples $ALL_WIN_FILES
 cd doc
 make fitykhelp.htb
 cd ..
 if [ -a doc/fitykhelp.htb ]; then
     unzip doc/fitykhelp.htb -d $ALL_WIN_FILES/doc
 else
     echo can not make doc/fitykhelp.htb
     exit
 fi
 # use default fonts in HTML Help
 egrep -v font $ALL_WIN_FILES/doc/html.css > tmp_html.css
 mv -f tmp_html.css $ALL_WIN_FILES/doc/html.css
 echo '"C:\Program Files\HTML Help Workshop\hhc.exe" doc\htmlhelp.hhp' \
					    >$ALL_WIN_FILES/build_help.cmd
 echo 'ren doc\htmlhelp.chm fitykhelp.chm' >>$ALL_WIN_FILES/build_help.cmd
 echo everything is in: `pwd`/$ALL_WIN_FILES
 

elif [ $1 -eq 8 ]; then
 echo  SF release
 echo uploading files...
 [ ! -e $tarball_filename ] && echo "File not found: $tarball_filename" && exit
 [ ! -e $win_setup_filename ] && echo "File not found: $win_setup_filename" \
                                                                       && exit
 #curl -v -T $tarball_filename ftp://upload.sourceforge.net/incoming/ 
 #curl -v -T $win_setup_filename ftp://upload.sourceforge.net/incoming/ 
 echo "do sftp frs.sourceforge.net:uploads/ (or lftp?)"
 echo now go to:
 echo $SF_NEW_RELEASE
 echo and add release named: $version
 

elif [ $1 -eq 9 ]; then
 echo web announce, prepare for vim editing...
 scp $WEB_ANNOUNCE_DIR/$WEB_ANNOUNCE_FILE .
 sleep 2
 vi $WEB_ANNOUNCE_FILE
 scp $WEB_ANNOUNCE_FILE $WEB_ANNOUNCE_DIR

 echo links from download page, prepare for vim editing...
 scp $WEB_ANNOUNCE_DIR/$WEB_DOWNLOAD_FILE .
 sleep 2
 vi $WEB_DOWNLOAD_FILE
 scp $WEB_DOWNLOAD_FILE $WEB_ANNOUNCE_DIR
 
 
elif [ $1 -eq 10 ]; then
 echo FM announce
 echo TODO
 # freshmeat-submit
 
 
elif [ $1 -eq 11 ]; then
 echo cleaning everything and preparing normal working environment
 rm -rf $BUILD_DIR
 make clean
 #./autogen.sh
 #./configure --enable-debug
 #make
 
else
 echo unexpected step number: $1
fi

