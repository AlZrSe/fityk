# $Id$
CXX =c++2
CFLAGS_COMMON=-Wall -fno-rtti -fno-exceptions -pipe 
		# -Wno-sign-compare -Weffc++ -Ddebug 
#with gcc 2.95 these files can't be compiled with -ansi:
# u_gnuplot.cpp - fdopen()
# wx_*.cpp - strdup() in wxwindows library headers

CPPFLAGS = #-D__WXDEBUG__
CXXFLAGS = -g $(CFLAGS_COMMON)
LDFLAGS =
U_LIBS = -lreadline -lncurses -lm
WX_LIBS = `wx-config --libs`
#WX_LIBS = -L/usr/local/lib -lwx_gtk-gcc2-2.3
LIBSPROF = -lm_p -lncurses -lreadline
GRAMMAR_OBJ = parser.o scanner.o
COMMON_OBJ = common.o file_IO.o data.o dotset.o \
	     v_fit.o LMfit.o GAfit.o NMfit.o \
	     fzgbase.o ffunc.o gfunc.o sum.o other.o manipul.o crystal.o 
ONLY_UNIX_OBJ = u_main.o u_rl_IO.o u_gnuplot.o 
ONLY_WX_OBJ = wx_gui.o wx_IO.o wx_plot.o wx_dlg.o
UNIX_OBJ =  $(COMMON_OBJ) $(GRAMMAR_OBJ) $(ONLY_UNIX_OBJ)
WX_OBJ = $(COMMON_OBJ) $(GRAMMAR_OBJ) $(ONLY_WX_OBJ)
ALL_OBJ = $(COMMON_OBJ) $(GRAMMAR_OBJ) $(ONLY_UNIX_OBJ) $(ONLY_WX_OBJ)
BIN = fityk cfityk

all: $(BIN)

grammar: $(GRAMMAR_OBJ)

cfityk : $(UNIX_OBJ)
	$(CXX) $(LDFLAGS) -o $@ $(UNIX_OBJ) $(U_LIBS) 

fityk : $(WX_OBJ) 
	$(CXX) $(LDFLAGS) -o $@ $(WX_OBJ) $(WX_LIBS)

release: CPPFLAGS = -DNDEBUG 
release: CXXFLAGS = $(CFLAGS_COMMON) -O3 
release: LDFLAGS = -s 
release: fityk cfityk

prof : CXXFLAGS += -pg -g -a -O2 #-Wunreachable-code
prof : $(UNIX_OBJ) 
	$(CXX) $(LDFLAGS) $(UNIX_OBJ) $(LIBSPROF) -pg -g -a

static : CPPFLAGS = -DNDEBUG 
static : CXXFLAGS = $(CFLAGS_COMMON) -O3 
static : LDFLAGS = -static -s
static : $(ALL_OBJ) 
	 $(CXX) $(LDFLAGS) -o cfityk-static $(UNIX_OBJ) \
	 /usr/lib/libreadline.a /usr/lib/libncurses.a 
	 $(CXX) $(LDFLAGS) -o fityk-static $(WX_OBJ) \
	 `wx-config --static --libs` 

$(WX_OBJ) : CXXFLAGS += `wx-config --cxxflags`
$(WX_OBJ:.o=.d) : CPPFLAGS += `wx-config --cxxflags` 


######################################################################

# because of problem with gcc 2.95
other.o: CXXFLAGS += -ftemplate-depth-30

%.d: %.cpp
	@set -e; $(CC) -MM $(CPPFLAGS) $< \
	| sed 's!\($*\)\.o[ :]*!\1.o $@ : !g' > $@; \
	[ -s $@ ] || rm -f $@

-include $(ALL_OBJ:.o=.d)

##lexer and parser

parser.cpp: parser.yy
	bison -p ip -d parser.yy && \
	mv parser.tab.cc parser.cpp

scanner.cpp: scanner.ll parser.cpp 
	flex scanner.ll && \
	sed "s/#include <unistd.h>/\/\/&/" lex.ip.c >scanner.cpp && \
	rm -f lex.ip.c



##
.PHONY: clean cleanall backup all grammar release prof static

clean : 
	-rm -f $(ALL_OBJ) $(ALL_OBJ:.o=.d) \
	       parser.cpp parser.tab.hh scanner.cpp $(BIN) core

cleanall: clean 
	-rm -f tags cscope.out parser.output *.d 

FDIR='src/fityk'

#backup :
#	cd .. && \
#	tar cjf $(FDIR)/backup-`date +%s`.tar.bz2 \
#	$(FDIR)/*.cpp $(FDIR)/*.h $(FDIR)/*.[ly] \
#	$(FDIR)/makefile $(FDIR)/TODO* $(FDIR)/img/ $(FDIR)/docs/ \
#	$(FDIR)/scripts/ $(FDIR)/dane/01nacl01.mca $(FDIR)/dane/nnn6.dat
#
